Lecture 1:
Iterating and rendering the object details form::
--We will add the form interface seen in the previous section with Material-UI
ExpansionPanel components to create a modifiable list of VR objects for each type
of VR object array in the given game.

Adding a new object to the array::
--For each array rendered in the game form, we will add a button that will let users
push new VR objects to the given array. This button to add an object will render a
new VRObjectForm component to take the details of a new VR object.

Removing an object from the array::
-Each of the items rendered in the list of VR object forms can also be removed from the
list by the user.
--The VRObjectForm component displaying an item will contain a delete option, which will remove the object from the given array.
--To implement the remove item functionality for this DELETE button, we will pass a removeObject method as a prop to the VRObjectForm component from the
parent GameForm component.

Lecture 2:
Handling the object detail change::
--The details of any VR object in the game will be updated when the user changes input
values in any of the fields in the corresponding VR object form.
--The GameForm component renders the form elements for modifying the details of a game, including the lists of VR objects. Using this form, users can add, modify, and
delete VR objects in the lists. The lists render each item in a VR object form that the users can use to compose the details of the object. In the next section, we will
implement the React component that renders this.

The VRObjectForm component::
--We will implement the VRObjectForm component to render the input fields for modifying an individual VR object's details, which are added to the answerObjects
and wrongObjects arrays of the game in the GameForm component.

--These input fields will allow the user to set the details of a VR object in a game. When
any of these VR object details are changed in these input fields by the user, the
handleChange method will be invoked.

--The removeObject method will take the value of the object array type and the array
index position, to remove the given object from the relevant VR object array in
the GameForm component's state

Lecture 3:
Adding the game list views::
--Visitors to MERN VR Game will access the games on the application from lists
rendered on the home page and individual user profiles. The home page will list all
the games on the application, and the games by a specific maker will be listed on their
user profile page. These list views will iterate through game data fetched using the
backend APIs for listing games, and render details of each game in a reusable React
component.

Rendering lists of games::
--Profile component, we can fetch the list of games by the given user with a call to the
associated list games by the maker API in an useEffect hook. With the retrieved list
of games set in the state, we can iterate over it to render each game in a GameDetail
component

The GameDetail component::
--We will implement the GameDetail component to render individual games in any
game list view in the application.
--This GameDetail component takes the game object
as a prop, and renders the details of the game, along with a PLAY GAME button that
links to the VR game view,
--This component will also conditionally render EDIT and DELETE buttons if the
current user is the maker of the game.

Lecture 4:
Playing the VR game::
--Users on the MERN VR Game application will be able to open and play any of the VR
games from within the application. To enable this, we will add an API on the server
that renders the index.html file, which was generated with React 360,

This API on the backend will receive a GET request at the following path:
/game/play?id=<game ID>

--This path takes a game ID value as a query parameter. The game ID in this URL will
be used in the React 360 code, as elaborated on later in the chapter, to fetch the game's
details using the load game API.

Implementing the API to render the VR game view::
--In order to implement the API that will render the VR game in the browser, we will
add a route in the backend that will receive a GET request and open the index.html
page from React 360.

--In the browser, this will render the React 360 game code, which needs to fetch the
game details from the database using the load game API and render the game world,
along with the VR objects that the user can interact with.

Updating the game code in React 360::
--we can update the React 360 project to make it render games directly from the game collection in the database.
--We will use the game ID in the link that opens the React 360 application to fetch game details, using the load game API from within the React 360 code. Then, we will set
this retrieved game data to the state so that the game loads details from the database instead of the static sample data we used
---Once the code is updated, we can bundle it again and place the compiled files
in the MERN application before trying out the integration,

Getting the game ID from a link::
--In order to render the VR game based on the game the user chose to play from the
MERN VR Game application, we need to retrieve the corresponding game ID from
the link that loads the VR game view.

componentDidMount = () => {
let gameId = Location.search.split('?id=')[1]
read({
gameId: gameId
}).then((data) => {
if (data.error) {
this.setState({error: data.error});
} else {
this.setState({
vrObjects: data.answerObjects.concat(data.wrongObjects),
game: data
});
Environment.setBackgroundImage(
{uri: data.world}
)
}
})
}

---Location.search gives us access to the query string in the incoming URL that
loads index.html. The retrieved query string is split to get the gameId value from
the id query parameter attached in the URL. We use this gameId value to fetch the
game details with the load game API on the backend and set it to the state for the
game and vrObjects values. To be able to use the load game API in the React 360
project, we will define a corresponding fetch method in the project

Fetching the game data with the load game API::
--We want to fetch the game data from within the React 360 code. In the React 360
project folder, we will add an api-game.js file that will contain a read fetch method
that makes a call to the load game API on the server using the provided game ID.

/MERNVR/api-game.js:
const read = (params) => {
return fetch('/api/game/' + params.gameId, {
method: 'GET'
}).then((response) => {
return response.json()
}).catch((err) => console.log(err))
}
export {
read
}

--This fetch method receives the game ID in the params and makes the API call to
retrieve the corresponding game from the database. It is used
in componentDidMount of the React 360 entry component, which is defined in the
index.js file, to retrieve the game details,

Bundling and integrating the updated code::
-With the React 360 code updated to fetch and render game details dynamically from
the server, we can bundle this code using the provided bundle script and place the
newly compiled files in the dist folder of the MERN VR Game project directory.

*************yarn bundle************

--This will generate the client.bundle.js and index.bundle.js bundle files in the
build/ folder with the updated React 360 code. These files, along with the
index.html file and static_assets folders, need to be added to the MERN VR
Game application code