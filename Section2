Lecture 1:
Listing all games::
--it will be possible to retrieve a list of all the games in the Game collection from the database using a list games API in the
backend.

Listing games by the maker::
--it will also be possible to retrieve a list of games made by a specific user.
--we will add another API endpoint in the
backend that accepts a GET request.
--A GET request received at this route will invoke the listByMaker controller method,
which will query the Game collection in the database to get the matching games.

Lecture 2::
Loading a game::
--we will expose an API that will retrieve the details of an individual game, specified by its ID in the game collection
--we can add a GET API that queries the Game collection with an ID and returns the corresponding game document in the response.

--This API for loading a single game will be used for the React views fetching a game detail and also the React 360 game view, which will render the game interface in the
MERN VR Game application.

Editing a game::
--Authorized users who are signed in—and also the maker of a specific game—will be
able to edit the details of that game in the database.
--To enable this feature, we will
implement an edit game API in the backend.
--This method can be used in the
frontend, which renders a form allowing users to update the game details.

Deleting a game::
--An authenticated and authorized user will be able to delete any of the games they
created on the application.
--To enable this feature, we will implement a delete game API in the backend.

--With these game CRUD APIs functional in the backend, we are ready to implement
the frontend that will use these APIs to allow users to create new games, list the
games, modify existing games, and load a single game in the React 360 game view.

Lecture 3:
Adding a form for creating and editing games::
--Users registered on the MERN VR Game application will be able to make new games
and modify these games from views on the application.
--To implement these views,
we will add React components that allow users to compose and modify the game
details and VR object details for each game.
--As the form for creating new and editing
existing games will have similar form fields for composing game details and VR
object details, we will make reusable components that can be used both for creating
and editing purposes.

Making a new game::
--When any user signs into the application, they will be given the option to make their
own VR game.
--They will see a MAKE GAME link on the menu that will navigate
them to a form where they can fill in the game details to create a new game on the
platform.

Updating the menu::
--We will update the navigation menu in the application to add the MAKE GAME
button, which will appear conditionally based on whether the user is signed in, and
redirect the user to a view containing the form to create a new game.

--This will show the MAKE GAME option to signed-in users, and they can click on it to
be redirected to the /game/new route containing the form view for making a new
game on the platform.

The NewGame component::
--We will implement the form view for creating a new game in the NewGame React
component. This form view will allow users to fill out the fields for a single game

Lecture 4::
Editing the game::
--Users will be able to edit the games they made on the platform using a form similar to
the form for creating new games.
--We will implement this edit game view in the
EditGame component, which will render the game form fields pre-populated with
the existing game's details.

The EditGame component::
--Just as in the NewGame component, the EditGame component will also use the
GameForm component to render the form elements. But in this form, the fields will
load the current values of the game to be edited, and users will be able to update
these values,

--the GameForm will take the given game's ID as a prop so that it can fetch the game details.

--The EditGame component will load in the browser at the /game/edit/:gameId path
when an authenticated user is accessing it. Both this EditGame component and the
NewGame component use the GameForm component to render the form elements that
allow users to add the details of a game.

Lecture 5:
Implementing the GameForm component::
-The GameForm component is used in both the NewGame and EditGame components,
and it contains the elements that allow users to enter game details and VR object
details for a single game.

--It may start with a blank game object or load an existing
game. To begin the implementation of this component, we will first initialize a blank
game object in the component state.

--If the GameForm component receives a gameId prop from the parent
component—such as from the EditGame component—then it will use the load game
API to retrieve the game's details and set it to the state, to be rendered in the form
view.

--The form view part in the GameForm component will essentially have two parts: one
part that takes simple game details—such as name, world image link, and clue
text—as input, and a second part that allows users to add a variable number of VR
objects to either the answer objects array or the wrong objects array.

Inputting simple game details::
--While creating or editing a game, users will first see the form elements for the simpler
details of the game, such as name, world image URL, and the clue text. This form
section with the simple game details will mostly be text input elements added using
the Material-UI TextField component, with a change handling method passed to
the onChange handler.
--The form will also give the
option to define arrays of VR objects that will also be a part of the game.

Modifying arrays of VR objects::
--Users will be able to define a dynamic number of VR objects in two different arrays
for each game. In order to allow users to modify these arrays of answerObjects and
wrongObjects that they wish to add to their VR game, GameForm will iterate
through each array and render a VR object form component for each object. With this,
it will become possible to add, remove, and modify VR objects from the GameForm
component,

--we will add these array manipulation functionalities in the
GameForm component. We will start by rendering each item in the VR object arrays
and incorporate an option to add a new item or remove an existing item from an
array. Then, since each item in an array will essentially be a form to enter VR object
details, we will also discuss how to handle the input changes made within each item
from the GameForm component.













