Making the VR Game Dynamic using MERN::
--In this chapter, we will extend the MongoDB, Express.js, React.js, and Node.js
(MERN) skeleton application to build the MERN VR Game application, and use it to
convert the static React 360 game developed in the previous chapter into a dynamic
game.
--We will achieve this by replacing the sample game data with game details
fetched directly from the database.

--We will use the MERN stack technologies to
implement a game model and Create, Read, Update, and Delete (CRUD) application
programming interfaces (APIs) in the backend, which will allow storage and
retrieval of games, and frontend views, which will allow users to make their own
games besides playing any of the games on the platform in their browser.

To make MERN VR Game a complete and dynamic game application, we will
implement the following:
--A game model schema to store game details in MongoDB
APIs for game CRUD operations
--React views for creating, editing, listing, and deleting games
--Updating the React 360 game to fetch data with the API
--Loading the VR game with dynamic game data.

Lecture 1:
Introducing the dynamic MERN VR Game application::
--On this platform, registered users will be able to make and
modify their own games by providing an equirectangular image for the game world,
and the VR object resources, including transform property values for each object to be
placed in the game world.

--Any visitor to the application will be able to browse
through all the games added by the makers and play any game, to find and collect the
3D objects in the game world that are relevant to the clue or description of each game.

--When a registered user signs into the application, they will see a home page with all
the games listed and an option to make their own game.

--We will add new React components related to creating, editing, and listing VR games,
and will also modify existing components such as the Profile, Menu, and Home
components as we build out the features of the MERN VR Game application in the
rest of the chapter. The core features in this game platform depend on the capability
to store specific details of each game

Lecture 2:
Defining a Game model::
--we will implement a Mongoose model to define a Game model, and the implementation will be similar to other
Mongoose model implementations.
--laid out the details needed for each game in order to implement the scavenger-hunt features defined for
the gameplay.
--We will design the game schema based on these specific details about the game, its
VR objects, and also a reference to the game maker.

--we will
discuss the specifics of the game schema, the sub-schema for storing individual VR
objects that will be a part of the game, and the validation check to ensure a minimum
number of VR objects are placed in the game.

Exploring the game schema::
--The game schema, which defines the game model with a structure for the game data,
will specify the fields to store details about each game. These details will include a
game name; a link for the game world image file, text description, or clue; arrays
containing details of 3D objects in the game, timestamps indicating when the game
was created or updated; and a reference to the user who created the game.

--These fields added in the game schema definition will capture details of each game on
the platform and allow us to implement the game-related features in the MERN VR
Game application.

Lecture 3:
Specifying the VR object schema::
--The answerObjects and wrongObjects fields already defined in the game schema
will both be arrays of VR object documents. These documents will represent the VR
objects that are a part of the game. We will define the VR object Mongoose schema for
these documents separately, with fields for storing the URLs of the object (OBJ) file
and Material Template Library (MTL) file, along with the React 360 transform
values, the scale value, and color value for each VR object.

--These fields in the VR object schema represent a VR object to be added to the game
world. When a new game document is saved to the database, the answerObjects
and wrongObjects arrays will be populated with VRObject documents that adhere
to this schema definition. When a user is creating a new game using this Game model
with the defined game and VR object schemas, we want to ensure the user adds at
least one VR object to each array in the game data.

Validating array length in the game schema::
--we have two arrays for adding VR
objects to the game. These answerObjects and wrongObjects arrays in a game
document must contain at least one VR object in each array when a game is being
saved in the game collection.

--These checks run every time a game is to be saved in the database and help ensure the
game is made with at least two VR objects, including one object that can be collected
and another object that cannot be collected.
--These schema definitions and validations
used for defining the Game model will allow a game database for the application to
be maintained. This game collection will cater to all the requirements for developing a
dynamic VR game according to the specifications of the MERN VR Game application.




